static bool llower_pressed = false;
static uint16_t llower_pressed_time = 0;
static bool rlower_pressed = false;
static uint16_t rlower_pressed_time = 0;

bool process_record_user(uint16_t keycode, keyrecord_t *record) {
  switch (keycode) {
    case LLOWER:
      if (record->event.pressed) {
        llower_pressed = true;
        llower_pressed_time = record->event.time;

        layer_on(_LLOWER);
        layer_on(_LOWER);
        update_tri_layer(_LLOWER, _RAISE, _ADJUST);
      } else {
        layer_off(_LLOWER);
        layer_off(_LOWER);
        update_tri_layer(_LLOWER, _RAISE, _ADJUST);

        if (llower_pressed && (TIMER_DIFF_16(record->event.time, llower_pressed_time) < TAPPING_TERM)) {
          register_code(KC_SPC);
          unregister_code(KC_SPC);
        }
        llower_pressed = false;
      }
      return false;
      break;
    case RLOWER:
      if (record->event.pressed) {
        rlower_pressed = true;
        rlower_pressed_time = record->event.time;

        layer_on(_RLOWER);
        layer_on(_LOWER);
        update_tri_layer(_RLOWER, _RAISE, _ADJUST);
      } else {
        layer_off(_RLOWER);
        layer_off(_LOWER)
        update_tri_layer(_RLOWER, _RAISE, _ADJUST);

        if (rlower_pressed && (TIMER_DIFF_16(record->event.time, rlower_pressed_time) < TAPPING_TERM)) {
          register_code(KC_ENTER);
          unregister_code(KC_ENTER);
        }
        rlower_pressed = false;
      }
      return false;
      break;
    case RAISE:
      if (record->event.pressed) {
        layer_on(_RAISE);
        update_tri_layer(_LOWER, _RAISE, _ADJUST);
      } else {
        layer_off(_RAISE);
        update_tri_layer(_LOWER, _RAISE, _ADJUST);
      }
      return false;
      break;
    case ADJUST:
      if (record->event.pressed) {
        layer_on(_ADJUST);
      } else {
        layer_off(_ADJUST);
      }
      return false;
      break;
    default:
      if (record->event.pressed) {
        // reset the flags
        llower_pressed = false;
        rlower_pressed = false;
      }
      break;
  }
  return true;
